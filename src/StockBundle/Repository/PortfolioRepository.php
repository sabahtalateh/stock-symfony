<?php

namespace StockBundle\Repository;

use StockBundle\Entity\Portfolio;
use StockBundle\Entity\PortfolioQuote;
use StockBundle\Entity\Quote;
use StockBundle\Entity\User;

/**
 * PortfolioRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class PortfolioRepository extends \Doctrine\ORM\EntityRepository
{
    /**
     * @param Portfolio $portfolio
     * @param Quote $quote
     * @param $amount
     * @param \DateTime $moment
     */
    public function addQuote(Portfolio $portfolio, Quote $quote, $amount, \DateTime $moment)
    {
        $em = $this->getEntityManager();

        $updatingEntity = $em
            ->getRepository('StockBundle:PortfolioQuote')
            ->findOneBy([
                'portfolio' => $portfolio,
                'quote' => $quote
            ]);

        if (!$updatingEntity) {

            $portfolioQuote = new PortfolioQuote();
            $portfolioQuote->setPortfolio($portfolio);
            $portfolioQuote->setQuote($quote);
            $portfolioQuote->setAmount($amount);

            $em->persist($portfolioQuote);

        } else {

            $currentAmount = $updatingEntity->getAmount();
            $updatingEntity->setAmount($currentAmount + $amount);

        }

        $this
            ->getEntityManager()
            ->getRepository('StockBundle:PortfolioSnapshot')
            ->makeSnapshot($portfolio, $quote, $amount, $moment);

        $em->flush();
    }

    /**
     * @param User $user
     * @return null|object
     */
    public function getActivePortfolioForUser(User $user)
    {
        return $this->findOneBy(['user' => $user, 'active' => true]);
    }

    /**
     * @param Portfolio $portfolio
     */
    public function activatePortfolio(Portfolio $portfolio)
    {
        $em = $this->getEntityManager();

        $allUsersPortfolios = $this->findBy(['user' => $portfolio->getUser()]);

        /** @var Portfolio $p */
        foreach ($allUsersPortfolios as $p) {
            $p->setActive(false);
        }
        $portfolio->setActive(true);

        $em->flush();
    }
}
